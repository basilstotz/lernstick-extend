#!/bin/sh


if ! test $(id --user) = 0;then
    exec sudo $0 $@
fi


on_exit(){
    do_umount $SOURCE
    test -f $IMAGE && chown --reference ..  $IMAGE
    test -d ./log/ && chown --recursive --reference ..  ./log/
    
}

do_help(){
    echo "Usage: $(basename $0) [options] patch_dir source_image"
    echo
    echo "Patch a  squashfs image and compress a new image."
    echo
    echo
    exit 0
}



do_extract(){
    #https://wiki.debian.org/DebianInstaller/Preseed/EditIso

    QUELLISO=$1

    
    echo -n "info: cleanup isofiles ..."
    if test -d ./isofiles;then
      chmod +w -R ./isofiles
      rm -r ./isofiles
    fi
    mkdir -p ./isofiles
    echo "done"
    
    echo -n "info: copy isofiles ..."
    mkdir -p isomount
    mount -r -o loop $QUELLISO isomount
    cp -r isomount/* isofiles
    umount isomount
    rmdir isomount
    echo "done"
}



do_compose(){
    #https://wiki.debian.org/DebianInstaller/Preseed/EditIso

    QUELLISO=$1

    cd isofiles
    test -f MD5SUM && chmod +w MD5SUM
    find -follow -type f ! -name MD5SUM -print0 | xargs -0 md5sum > MD5SUM
    chmod -w MD5SUM
    cd ..


    xorriso -as mkisofs -o remaster-$(basename $QUELLISO) \
	    -isohybrid-mbr /usr/lib/ISOLINUX/isohdpfx.bin -iso-level 3 \
	    -c isolinux/boot.cat -b isolinux/isolinux.bin -no-emul-boot \
	    -boot-load-size 4 -boot-info-table isofiles
}




do_umount(){
    IMG=$1
    
    #    MNT=$(basename -s .img $IMG)
    MNT=$(basename $IMG)
    #umount
    if mount|grep -q ./mnt/${MNT}.rofs;then
	 sudo umount ./mnt/${MNT}.rofs    
    fi

    if mount|grep -q ./mnt/${MNT}.work;then
	 sudo umount ${MNT}
    fi
    #clean
    if  test -d ${MNT}; then rm -r ${MNT};fi
    if  test -d ./mnt/${MNT}.work; then rm -r ./mnt/${MNT}.work;fi
    if  test -d ./mnt/${MNT}.rwfs; then rm -r ./mnt/${MNT}.rwfs;fi
    if  test -d ./mnt/${MNT}.rofs; then rm -r ./mnt/${MNT}.rofs;fi
}


do_mount(){
    IMG=$1
    
    do_umount $IMG
    #    MNT=$(basename -s .img $IMG)
    MNT=$(basename $IMG)
    #make mountpounts
    if ! test -d ${MNT}; then mkdir ${MNT};fi
    if ! test -d ./mnt/${MNT}.rofs; then mkdir -p ./mnt/${MNT}.rofs;fi
    if ! test -d ./mnt/${MNT}.rwfs; then mkdir -p ./mnt/${MNT}.rwfs;fi
    if ! test -d ./mnt/${MNT}.work; then mkdir -p ./mnt/${MNT}.work;fi

    #mount image
    sudo mount -r -o loop ${IMG} ./mnt/${MNT}.rofs
    #make it writeable
    sudo mount -t overlay  overlay -olowerdir=./mnt/${MNT}.rofs,upperdir=./mnt/${MNT}.rwfs,workdir=./mnt/${MNT}.work  ${MNT}

    #generic-img-mount $1
    if test $? -ne 0;then
       echo "could not mount \"$SOURCE\""
       exit 1
    fi
    CHROOT=$(basename $1)
    
}

do_chroot(){
    mount -o bind /dev $CHROOT/dev
    mount -o bind /dev/pts $CHROOT/dev/pts
    mount -o bind /proc $CHROOT/proc
    mount -o bind /sys $CHROOT/sys

    chroot $CHROOT

    umount  ${CHROOT}/proc
    umount  ${CHROOT}/dev/pts
    umount  ${CHROOT}/dev
    umount  ${CHROOT}/sys
}


do_patch(){
    PLACE=opt/puavo-os-extra

    #copy data to chroot
    echo "info: copy patchdir to chroot" 1>&2
    mkdir -p $CHROOT/$PLACE
    cp -r $1/* $CHROOT/$PLACE

    #copy cached apt to chroot
    echo "info: copy apt from cache to chroot"                                           1>&2
    rsync -ra  --size-only ./cache/apt/ $CHROOT/var/cache/apt/archives/.

    # do chroot
    echo "info: enter chroot"                                                            1>&2
    echo "run-parts --regex=\"^[0-9]{2}-.*$\" /$PLACE" | do_chroot $CHROOT
    if test $? -ne 0;then
       echo "could not patch \"$1\""                                                     1>&2
       exit 1
    fi
    echo "info: exit chroot"                                                             1>&2

    # copyback apt and clean chroot
    echo "info: update apt cache"                                                        1>&2
    rsync -rav  --delete --size-only  $CHROOT/var/cache/apt/archives/ ./cache/apt/       1>&2
    echo "info: remove apt in chroot"                                                    1>&2
    rm -r $CHROOT/var/cache/apt/archives/*

    rm -r $CHROOT/$PLACE/*
    cp -r $1/* $CHROOT/$PLACE
    
}

do_image_name(){
    #compose new image name
    VERSION=$(date +%Y-%m-%d-%H%M%S)
    echo "$VERSION-$(basename $SOURCE)"
}

do_image(){

    
    #    make compressed image
    mksquashfs  $CHROOT ${IMAGE} -noappend -no-recovery
  
    if test $? -ne 0;then
       echo "could not make image"
       exit 1
    fi    
}

###################################################################################
###################################################################################

OSNAME=""
CLASS=""


while [ $# -gt 0 ]; do
    case $1 in
	-h|--help)
	    shift
	    do_help
	    ;;
	#config 
	--)
	    shift
	    break
	    ;;
	-*)
	    echo "error: invalid argument '$1'"
	    exit 1
	    ;;
	*)
	    break
	    ;;
    esac
done

# some paramter checks
if [ $# -ne 2 ]; then
    echo 
    echo "error: invalid number of arguments ($#), expected 2"
    do_help
    exit 1
fi


DATADIR=$1
SOURCE=$2

if ! test -f $SOURCE; then
	echo "error: source file not found"
	exit 1
fi

mkdir -p ./log/
mkdir -p ./cache/apt/
mkdir -p ./mnt

mkdir -p ./iso

trap on_exit EXIT
trap on_exit INT

do_extract $SOURCE


LIVE="isofiles/live/filesystem.squashfs"

do_mount  $LIVE

IMAGE=filesystem-remaster.squashfs

#do_patch  $DATADIR > ./log/$IMAGE.log

do_image $IMAGE


chmod +w $LIVE
mv $LIVE $(basename $LIVE)
mv filesystem-remaster.squashfs $LIVE
chmod -w $LIVE

do_compose $SOURCE

#mv $(basename $LIVE $LIVE

exit 0
